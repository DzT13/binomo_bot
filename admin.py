from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import os
import re
from json import load, dump
from random import randrange

from change_image import change_graph, change_form
from bot import bot, dp


class Form(StatesGroup):
	add_users = State()
	form = State()
	graph = State()
	requisit = State()


async def send_start(message):
	await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –í–µ—Ä–∏—Ñ –∏–ª–∏ –î–æ—Ö–æ–¥", reply_markup = button_admin())

async def send_add_users(message):
	await bot.send_message(message.chat.id, text_add_users, reply_markup = button_admin())
	await Form.add_users.set()

async def send_form(message):
	await bot.send_message(message.chat.id, text_form, reply_markup = button_admin())
	await Form.form.set()

async def send_graph(message):
	await bot.send_message(message.chat.id, text_graph, reply_markup = button_admin())
	await Form.graph.set()

async def send_requisit(message):
	await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:", reply_markup = button_admin())
	await Form.requisit.set()

async def send_clear(message):
	with open("users.json", "w") as f:
		dump(dict(), f, indent = 4, ensure_ascii = False)

	await bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–Ω–∞", reply_markup = button_admin())

@dp.message_handler(state = Form.add_users)
async def handle_add_users(message: types.Message, state: FSMContext):
	await state.finish()

	args = message.text.split('\n')
	if len(args) != 5:
		return await bot.send_message(message.chat.id, "–í–≤–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π", reply_markup = button_admin())

	if not(os.path.exists("requisits.json")):
		return await bot.send_message(message.chat.id, "–í—ã –µ—â—ë –Ω–µ –≤–≤–µ–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã", reply_markup = button_admin())

	full_name, deposit, data, broker, active_trading = args
	if broker not in {'1', '2'}:
		return await bot.send_message(message.chat.id, text_broker_not_correct, reply_markup = button_admin())

	db = dict()
	if os.path.exists("users.json"):
		with open("users.json", "r", encoding = "utf8") as f:
			db = load(f)

	if len(db.keys()) >= 89999:
		return await bot.send_message(message.chat.id, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞", reply_markup = button_admin())

	slot = randrange(10000, 99999)
	while slot in db.keys():
		slot = randrange(10000, 99999)

	db[slot] = {
		"–§–ò–û" : full_name,
		"–¥–µ–ø–æ–∑–∏—Ç" : deposit,
		"–¥–∞—Ç–∞": data,
		"–±—Ä–æ–∫–µ—Ä": broker,
		"a–∫—Ç–∏–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏": active_trading
	}

	with open("users.json", "w", encoding = "utf8") as f:
		dump(db, f, indent = 4, ensure_ascii = False)

	with open("requisits.json", "r", encoding = "utf8") as f:
		requisit = load(f)

	text = text_slot_created.format(slot, full_name, deposit, requisit)
	await bot.send_message(message.chat.id, text, reply_markup = button_admin())

@dp.message_handler(state = Form.form)
async def handle_form(message: types.Message, state: FSMContext):
	await state.finish()

	args = message.text.split('\n')
	if len(args) != 4:
		return await bot.send_message(message.chat.id, "–í–≤–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π", reply_markup = button_admin())

	full_name, deposit, data, income = args
	if len(full_name) > 14:
		full_name = full_name[:13] + ".."

	await change_form(message, full_name, deposit, data, income)

@dp.message_handler(state = Form.graph)
async def handle_graph(message: types.Message, state: FSMContext):
	await state.finish()

	args = message.text.split('\n')
	if len(args) != 7:
		return await bot.send_message(message.chat.id, "–í–≤–æ–¥ –Ω–µ –≤–µ—Ä–Ω—ã–π", reply_markup = button_admin())

	full_name, deposit, data, income, broker, active_trading, total_income = message.text.split('\n')

	if broker not in {'1', '2'}:
		return await bot.send_message(message.chat.id, text_broker_not_correct, reply_markup = button_admin())

	if len(full_name) > 14:
		full_name = full_name[:13] + ".."

	total_income = float(total_income)
	broker_income = total_income * (400 / 1041)
	client_income = total_income * (206 / 347)

	await change_graph(message, full_name, deposit, data, income, broker, active_trading, total_income, broker_income, client_income)

@dp.message_handler(state = Form.requisit)
async def handle_requisit(message: types.Message, state: FSMContext):
	await state.finish()

	text = message.text
	sample = re.search(r"^\d{4}([_\- ]*\d{4}){3}$", text)

	if sample is None:
		return await bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã –≤–≤–µ–¥–µ–Ω–Ω—ã –Ω–µ –≤–µ—Ä–Ω–æ", reply_markup = button_admin())

	with open("requisits.json", "w", encoding = "utf8") as f:
		dump(text, f, indent = 4, ensure_ascii = False)

	await bot.send_message(message.chat.id, "–†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã", reply_markup = button_admin())

def button_admin():
	markup = ReplyKeyboardMarkup(resize_keyboard = True)
	markup.add(KeyboardButton("–í–µ—Ä–∏—Ñ"), KeyboardButton("–î–æ—Ö–æ–¥"), KeyboardButton("C–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É"))
	markup.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"), KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å"), KeyboardButton("–†–µ–∫–≤–µ–∑–∏—Ç—ã"))

	return markup

text_add_users = """
–§–ò–û:
–î–µ–ø–æ–∑–∏—Ç:
–î–∞—Ç–∞:
–ë—Ä–æ–∫–µ—Ä:
–ê–∫—Ç–∏–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:
"""

text_slot_created = """
üßæ<b>–°–ª–æ—Ç</b> ‚Ññ<code>{}</code> —Å–æ–∑–¥–∞–Ω
üë§<b>–ò–Ω–≤–µ—Å—Ç–æ—Ä</b>: {}
üíµ<b>–î–µ–ø–æ–∑–∏—Ç</b>: {} —Ä—É–±
üí≥<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>: <code>{}</code>

<i>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã 15 –º–∏–Ω—É—Ç</i>
"""

text_form = """
–§–ò–û:
–î–µ–ø–æ–∑–∏—Ç:
–î–∞—Ç–∞:
–î–æ—Ö–æ–¥:
"""

text_graph = """
–§–ò–û:
–î–µ–ø–æ–∑–∏—Ç:
–î–∞—Ç–∞:
–î–æ—Ö–æ–¥:
–ë—Ä–æ–∫–µ—Ä:
–ê–∫—Ç–∏–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏:
–û–±—â–∏–π –¥–æ—Ö–æ–¥:
"""

text_broker_not_correct = """
–ë—Ä–æ–∫–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ –≤–µ—Ä–Ω–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –±—Ä–æ–∫–µ—Ä–∞:
1: Romanenko Invest Capital
2: –§–æ–Ω–¥ –ø–æ–º–æ—â–∏
"""